# =======================================
# CI/CD Pipeline for Mini-UPS Frontend
# =======================================

name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop, staging ]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-deploy.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'frontend/**'
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: mini-ups/frontend

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =======================================
  # Build and Test Job
  # =======================================
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # For better analysis

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ./frontend/node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --legacy-peer-deps

      - name: Type checking
        run: npm run type-check

      - name: Lint code
        run: npm run lint

      - name: Run tests
        run: npm run test:coverage

      - name: Upload test coverage
        if: matrix.node-version == 20
        uses: codecov/codecov-action@v4
        with:
          directory: ./frontend/coverage
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

      - name: Build application (staging)
        if: github.ref != 'refs/heads/main'
        run: npm run build:staging
        env:
          VITE_API_BASE_URL: ${{ secrets.STAGING_API_URL }}
          VITE_WS_BASE_URL: ${{ secrets.STAGING_WS_URL }}
          VITE_APP_VERSION: ${{ github.sha }}
          VITE_ENABLE_ANALYTICS: false
          VITE_LOG_LEVEL: info

      - name: Build application (production)
        if: github.ref == 'refs/heads/main'
        run: npm run build:production
        env:
          VITE_API_BASE_URL: ${{ secrets.PRODUCTION_API_URL }}
          VITE_WS_BASE_URL: ${{ secrets.PRODUCTION_WS_URL }}
          VITE_APP_VERSION: ${{ github.sha }}
          VITE_ENABLE_ANALYTICS: true
          VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          VITE_LOG_LEVEL: error

      - name: Analyze bundle size
        if: matrix.node-version == 20
        run: npm run size-limit

      - name: Upload build artifacts
        if: matrix.node-version == 20
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: |
            ./frontend/dist
            ./frontend/dist/build-report.json
          retention-days: 7

  # =======================================
  # Security Scanning Job
  # =======================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --legacy-peer-deps

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run dependency vulnerability scan
        uses: securecodewarrior/github-action-add-sarif@v1
        if: github.actor != 'dependabot[bot]'
        with:
          sarif-file: 'vulnerability-scan.sarif'
        continue-on-error: true

  # =======================================
  # Build Docker Image Job
  # =======================================
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: ./frontend/dist

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_ENV=production
            BUILD_MODE=${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
            VITE_APP_VERSION=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: sbom.spdx.json

  # =======================================
  # Deploy to Staging Job
  # =======================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging' || (github.event_name == 'workflow_dispatch' && inputs.deploy_environment == 'staging')
    
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.app-url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare deployment
        run: |
          echo "Preparing deployment..."
          echo "Image: ${{ needs.build-docker.outputs.image-tag }}"

      - name: Deploy to ECS Staging
        id: deploy
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster mini-ups-staging \
            --service frontend-staging \
            --task-definition frontend-staging:${{ github.run_number }} \
            --force-new-deployment
          
          # Wait for deployment to complete
          aws ecs wait services-stable \
            --cluster mini-ups-staging \
            --services frontend-staging
          
          # Get ALB URL
          ALB_URL=$(aws elbv2 describe-load-balancers \
            --names mini-ups-staging-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          
          echo "app-url=https://${ALB_URL}" >> $GITHUB_OUTPUT

      - name: Run smoke tests
        run: |
          # Wait a bit for the service to be ready
          sleep 30
          
          # Basic health check
          curl -f ${{ steps.deploy.outputs.app-url }}/health || exit 1
          
          # Check main page loads
          curl -f ${{ steps.deploy.outputs.app-url }} || exit 1

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          channel: '#deployments'
          text: 'âœ… Frontend deployed to staging successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # =======================================
  # Deploy to Production Job
  # =======================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.deploy_environment == 'production')
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.app-url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare deployment
        run: |
          echo "Preparing deployment..."
          echo "Image: ${{ needs.build-docker.outputs.image-tag }}"

      - name: Deploy to ECS Production
        id: deploy
        run: |
          # Blue-Green deployment strategy
          # Update ECS service with new image
          aws ecs update-service \
            --cluster mini-ups-production \
            --service frontend-production \
            --task-definition frontend-production:${{ github.run_number }} \
            --force-new-deployment
          
          # Wait for deployment to complete
          aws ecs wait services-stable \
            --cluster mini-ups-production \
            --services frontend-production
          
          # Get ALB URL
          ALB_URL=$(aws elbv2 describe-load-balancers \
            --names mini-ups-production-alb \
            --query 'LoadBalancers[0].DNSName' \
            --output text)
          
          echo "app-url=https://${ALB_URL}" >> $GITHUB_OUTPUT

      - name: Run production smoke tests
        run: |
          # Wait for the service to be ready
          sleep 60
          
          # Health check
          curl -f ${{ steps.deploy.outputs.app-url }}/health || exit 1
          
          # Performance test
          curl -f ${{ steps.deploy.outputs.app-url }} || exit 1
          
          # API connectivity test
          curl -f ${{ steps.deploy.outputs.app-url }}/api/health || exit 1

      - name: Run Lighthouse audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            ${{ steps.deploy.outputs.app-url }}
          configPath: './frontend/.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          channel: '#deployments'
          text: 'ðŸš€ Frontend deployed to production successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Frontend Release v${{ github.run_number }}
          body: |
            ðŸš€ **Frontend Release v${{ github.run_number }}**
            
            **Changes:**
            - Deployed from commit: ${{ github.sha }}
            - Docker image: ${{ needs.build-docker.outputs.image-tag }}
            
            **Deployment:**
            - Environment: Production
            - URL: ${{ steps.deploy.outputs.app-url }}
            
            **Build Artifacts:**
            - Bundle size analysis available in artifacts
            - Lighthouse audit results attached
          draft: false
          prerelease: false

  # =======================================
  # Cleanup Job
  # =======================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Clean up old images
        uses: actions/delete-package-versions@v4
        with:
          package-name: 'mini-ups/frontend'
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: true