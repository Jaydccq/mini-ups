version: '3.8'

services:
  # PostgreSQL数据库
  database:
    image: postgres:15
    container_name: mini-ups-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB?POSTGRES_DB is not set}
      POSTGRES_USER: ${POSTGRES_USER?POSTGRES_USER is not set}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD?POSTGRES_PASSWORD is not set}
      TZ: UTC
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: mini-ups-redis
    command: redis-server --requirepass ${REDIS_PASSWORD?REDIS_PASSWORD is not set}
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD?REDIS_PASSWORD is not set}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # RabbitMQ消息队列
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: mini-ups-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: -rabbit log_levels [{connection,error},{default,error}]
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 15s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Spring Boot后端
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mini-ups-backend
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-production}
      DATABASE_URL: jdbc:postgresql://database:5432/${POSTGRES_DB?POSTGRES_DB is not set}
      DATABASE_USERNAME: ${POSTGRES_USER?POSTGRES_USER is not set}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD?POSTGRES_PASSWORD is not set}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD?REDIS_PASSWORD is not set}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USERNAME: ${RABBITMQ_USER:-guest}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-guest}
      JWT_SECRET: ${JWT_SECRET?JWT_SECRET is not set}
      WORLD_SIMULATOR_HOST: ${WORLD_SIMULATOR_HOST:-localhost}
      AMAZON_API_URL: ${AMAZON_API_URL:-http://localhost:8080}
      NUM_TRUCKS: ${NUM_TRUCKS:-5}
      WORLD_ID: ${WORLD_ID:-}
    ports:
      - "8081:8081"
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # React前端
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: mini-ups-frontend
    environment:
      REACT_APP_API_URL: http://localhost:8081/api
    ports:
      - "3000:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
  rabbitmq_data:

networks:
  default:
    name: mini-ups-network