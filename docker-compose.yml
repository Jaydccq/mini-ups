services:
  # World Simulator Database
  worldsim-db:
    image: postgres:12
    container_name: mini-ups-worldsim-db
    environment:
      POSTGRES_PASSWORD: abc123
      POSTGRES_USER: postgres
      POSTGRES_DB: worldSim
    ports:
      - "25432:5432"
    volumes:
      - worldsim_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      projectnet:
        aliases:
          - mydb

  # World Simulator Service
  world-simulator:
    build:
      context: ./knowledge/world_simulator_exec/docker_deploy/
    container_name: mini-ups-world-simulator
    command: bash -c "./wait-for-it.sh mydb:5432 --strict -- ./server 12345 23456 0"
    ports:
      - "12345:12345"  # UPS port
      - "23456:23456"  # Amazon port
    depends_on:
      worldsim-db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - projectnet

  # Amazon Database
  amazon-db:
    image: postgres:12-alpine3.15
    container_name: mini-ups-amazon-db
    volumes:
      - amazon_postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_PASSWORD: abc123
      POSTGRES_USER: postgres
      POSTGRES_DB: mini_amazon
    ports:
      - "15432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - projectnet

  # Amazon Service
  amazon-web:
    build:
      context: ./knowledge/amazon/
    container_name: mini-ups-amazon-web
    ports:
      - "8080:8080"
    volumes:
      - ./knowledge/amazon:/app
    environment:
      FLASK_APP: app
      FLASK_ENV: development
      FLASK_RUN_PORT: 8080
      DATABASE_URL: postgresql://postgres:abc123@amazon-db:5432/mini_amazon
      SECRET_KEY: dev
      WORLD_HOST: world-simulator
      WORLD_PORT: "23456"
    depends_on:
      amazon-db:
        condition: service_healthy
      world-simulator:
        condition: service_started
    restart: unless-stopped
    networks:
      - projectnet

  # UPS PostgreSQL Database
  ups-database:
    image: postgres:15
    container_name: mini-ups-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ups_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-abc123}
      TZ: UTC
    ports:
      - "5431:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - projectnet

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: mini-ups-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-test123}
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-test123}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - projectnet

  # RabbitMQ消息队列
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: mini-ups-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
      RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS: -rabbit log_levels [{connection,error},{default,error}]
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 15s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - projectnet

  # UPS Spring Boot Backend
  ups-backend:
    image: ${BACKEND_IMAGE:-mini-ups-backend:latest}
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mini-ups-backend
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      DATABASE_URL: jdbc:postgresql://ups-database:5432/${POSTGRES_DB:-ups_db}
      DATABASE_USERNAME: ${POSTGRES_USER:-postgres}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-abc123}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-test123}
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: ${RABBITMQ_USER:-guest}
      SPRING_RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-guest}
      JWT_SECRET: ${JWT_SECRET:-default_jwt_secret_for_development_only}
      WORLD_SIMULATOR_HOST: world-simulator
      WORLD_SIMULATOR_PORT: 12345
      AMAZON_API_URL: http://amazon-web:8080
      NUM_TRUCKS: ${NUM_TRUCKS:-5}
      WORLD_ID: ${WORLD_ID:-}
    ports:
      - "8081:8081"
    depends_on:
      ups-database:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      world-simulator:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    networks:
      - projectnet

  # UPS React Frontend
  ups-frontend:
    image: ${FRONTEND_IMAGE:-mini-ups-frontend:latest}
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: mini-ups-frontend
    environment:
      REACT_APP_API_URL: http://localhost:8081/api
      VITE_API_BASE_URL: http://mini-ups-backend:8081
    ports:
      - "3000:3000"
    depends_on:
      - ups-backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - projectnet

volumes:
  postgres_data:
  rabbitmq_data:
  worldsim_data:
  amazon_postgres_data:

networks:
  projectnet:
    external: true