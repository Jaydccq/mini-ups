# Optimized Docker Compose for t2.micro (1GB RAM)
# Simplified version - runs only UPS services

services:
  # UPS PostgreSQL Database
  ups-database:
    image: postgres:15-alpine
    container_name: mini-ups-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ups_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-abc123}
      POSTGRES_INITDB_ARGS: "--data-checksums"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 150M
    networks:
      - miniups

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mini-ups-redis
    command: redis-server --maxmemory 50mb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD:-test123}
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-test123}", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 80M
        reservations:
          memory: 50M
    networks:
      - miniups

  # UPS Spring Boot Backend
  ups-backend:
    image: ${BACKEND_IMAGE:-mini-ups-backend:latest}
    container_name: mini-ups-backend
    environment:
      SPRING_PROFILES_ACTIVE: docker,rabbitmq-disabled
      DATABASE_URL: jdbc:postgresql://ups-database:5432/${POSTGRES_DB:-ups_db}
      DATABASE_USERNAME: ${POSTGRES_USER:-postgres}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-abc123}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-test123}
      JWT_SECRET: ${JWT_SECRET:-mini-ups-production-jwt-secret-key-32-chars-minimum}
      # Optimize for low memory
      JAVA_OPTS: "-Xmx300m -Xms150m -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
      # Disable resource-intensive features
      WORLD_SIMULATOR_ENABLED: false
      RABBITMQ_ENABLED: false
      NOTIFICATIONS_ENABLED: false
      ANALYTICS_ENABLED: false
      # Disable Spring Boot RabbitMQ auto-configuration
      SPRING_AUTOCONFIGURE_EXCLUDE: org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration
    ports:
      - "8081:8081"
    depends_on:
      ups-database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 400M
        reservations:
          memory: 300M
    volumes:
      - ./logs:/app/logs
    networks:
      - miniups

  # UPS React Frontend
  ups-frontend:
    image: ${FRONTEND_IMAGE:-mini-ups-frontend:latest}
    container_name: mini-ups-frontend
    environment:
      VITE_API_BASE_URL: http://${PUBLIC_IP:-44.219.181.190}:8081/api
      VITE_WS_BASE_URL: ws://${PUBLIC_IP:-44.219.181.190}:8081/ws
      VITE_APP_VERSION: ${GITHUB_SHA:-latest}
    ports:
      - "3000:80"
    depends_on:
      - ups-backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 60s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 100M
        reservations:
          memory: 50M
    networks:
      - miniups

  # Nginx Reverse Proxy (Disabled for t2.micro to save memory)
  # Uncomment below if you want reverse proxy with load balancing
  # nginx:
  #   image: nginx:alpine
  #   container_name: mini-ups-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - ups-backend
  #     - ups-frontend
  #   restart: unless-stopped
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 50M
  #       reservations:
  #         memory: 20M
  #   networks:
  #     - miniups

volumes:
  postgres_data:
    driver: local

networks:
  miniups:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1500