server:
  port: 8081

spring:
  application:
    name: mini-ups-backend
  
  profiles:
    active: dev
  
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/mini_ups}
    username: ${DATABASE_USERNAME:postgres}
    password: ${DATABASE_PASSWORD:postgres}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
    open-in-view: false
  
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6380}
      database: ${REDIS_DATABASE:0}
      timeout: ${REDIS_TIMEOUT:2000ms}
      lettuce:
        pool:
          max-active: 10
          max-idle: 8
          min-idle: 0
      repositories:
        enabled: false
  
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}
    virtual-host: ${RABBITMQ_VIRTUAL_HOST:/}
    connection-timeout: ${RABBITMQ_CONNECTION_TIMEOUT:10000}
    publisher-confirm-type: correlated
    publisher-returns: true
    stomp:
      port: ${RABBITMQ_STOMP_PORT:61613}
    listener:
      simple:
        acknowledge-mode: manual
        prefetch: 1
        retry:
          enabled: true
          initial-interval: 1000
          max-attempts: 3
          max-interval: 10000
          multiplier: 2.0
  
  jackson:
    default-property-inclusion: non_null
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: UTC

# JWT Configuration
jwt:
  secret: ${JWT_SECRET} # REQUIRED: Must be set as environment variable (minimum 32 characters)
  expiration: ${JWT_EXPIRATION:86400000} # 24 hours in milliseconds

# World Simulator Configuration
world:
  simulator:
    host: ${WORLD_SIMULATOR_HOST:host.docker.internal}
    port: ${WORLD_SIMULATOR_PORT:12345}
    connection-timeout: ${WORLD_SIMULATOR_CONNECTION_TIMEOUT:10000}
    default-sim-speed: ${WORLD_SIMULATOR_DEFAULT_SPEED:1000}

# Amazon Integration Configuration  
amazon:
  base-url: ${AMAZON_API_BASE_URL:http://localhost:8080}
  webhook:
    secret: ${AMAZON_WEBHOOK_SECRET:default-webhook-secret-key}
    signature-header: ${AMAZON_WEBHOOK_SIGNATURE_HEADER:X-Amazon-Signature}
    authentication:
      enabled: ${AMAZON_WEBHOOK_AUTH_ENABLED:true}
  webhook-endpoints:
    truck-arrived: /api/webhooks/truck-arrived
    truck-dispatched: /api/webhooks/truck-dispatched
    shipment-delivered: /api/webhooks/shipment-delivered
    shipment-detail-request: /api/webhooks/shipment-detail-request

# HTTP Client Configuration (for external service communication)
http:
  client:
    max-total-connections: ${HTTP_CLIENT_MAX_TOTAL_CONNECTIONS:100}
    max-default-per-route: ${HTTP_CLIENT_MAX_DEFAULT_PER_ROUTE:20}
    connect-timeout-ms: ${HTTP_CLIENT_CONNECT_TIMEOUT:10000}
    socket-timeout-ms: ${HTTP_CLIENT_SOCKET_TIMEOUT:30000}

# Logging Configuration
logging:
  level:
    com.miniups: DEBUG
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/mini-ups.log

# Management Endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when_authorized

# OpenAPI Documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method

# Rate Limiting Configuration
rate-limiting:
  enabled: ${RATE_LIMITING_ENABLED:true}
  shipment-creation:
    requests-per-minute: ${RATE_LIMITING_SHIPMENT_CREATION_RPM:10}
  general-api:
    requests-per-minute: ${RATE_LIMITING_GENERAL_API_RPM:60}

# Application-specific Configuration
app:
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8081}
  rabbitmq:
    test:
      enabled: ${RABBITMQ_TEST_ENABLED:false}
  notifications:
    enabled: ${NOTIFICATIONS_ENABLED:true}
    email:
      enabled: ${EMAIL_NOTIFICATIONS_ENABLED:true}
    sms:
      enabled: ${SMS_NOTIFICATIONS_ENABLED:false}
    push:
      enabled: ${PUSH_NOTIFICATIONS_ENABLED:false}