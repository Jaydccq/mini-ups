spring:
  application:
    name: mini-ups-backend
  
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT:5432}/${POSTGRES_DB:ups_db}
    username: ${POSTGRES_USER:postgres}
    password: ${POSTGRES_PASSWORD}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      leak-detection-threshold: 60000
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: false
        use_sql_comments: false
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
    open-in-view: false
  
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT:6379}
      database: 0
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 20
          max-idle: 8
          min-idle: 2
          max-wait: 2000ms
  
  cache:
    type: redis
    redis:
      time-to-live: 600000

server:
  port: 8081
  tomcat:
    max-threads: 200
    min-spare-threads: 10
    max-connections: 10000
    accept-count: 100
  compression:
    enabled: true
    mime-types: 
      - text/html
      - text/css
      - text/javascript
      - application/javascript
      - application/json
    min-response-size: 1024

# JWT Configuration
jwt:
  secret: ${JWT_SECRET}
  expiration: 86400000 # 24 hours

# World Simulator Configuration
world:
  simulator:
    host: ${WORLD_HOST:world-simulator.local}
    port: ${WORLD_PORT:12345}
    connection-timeout: 10000
    default-sim-speed: 1000
    retry-attempts: 3
    retry-delay: 5000

# Amazon Integration Configuration  
amazon:
  base-url: ${AMAZON_API_URL:http://amazon-service.local:8080}
  webhook-endpoints:
    truck-arrived: /api/webhooks/truck-arrived
    truck-dispatched: /api/webhooks/truck-dispatched
    shipment-delivered: /api/webhooks/shipment-delivered
    shipment-detail-request: /api/webhooks/shipment-detail-request
  timeout: 30000
  retry-attempts: 3

# AWS Configuration
cloud:
  aws:
    region:
      static: ${AWS_REGION:us-east-1}
    stack:
      auto: false
    credentials:
      use-default-aws-credentials-chain: true

# Logging Configuration
logging:
  level:
    root: INFO
    com.miniups: INFO
    org.hibernate.SQL: WARN
    org.springframework.web: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  appender:
    console:
      pattern: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,loggers
      base-path: /actuator
  endpoint:
    health:
      show-details: when_authorized
      show-components: always
      probes:
        enabled: true
    metrics:
      enabled: true
    prometheus:
      enabled: true
  health:
    redis:
      enabled: true
    db:
      enabled: true
  metrics:
    export:
      cloudwatch:
        enabled: true
        namespace: MiniUPS
        batch-size: 20
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
      sla:
        http.server.requests: 50ms, 100ms, 200ms, 500ms

# OpenAPI Documentation
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    disable-swagger-default-url: true
  show-actuator: true

# Security Configuration
security:
  cors:
    allowed-origins: 
      - "*"
    allowed-methods: 
      - GET
      - POST
      - PUT
      - DELETE
      - OPTIONS
    allowed-headers: 
      - "*"
    allow-credentials: false
    max-age: 3600