spring:
  datasource:
    # Support both legacy format and direct DATABASE_URL format
    url: ${DATABASE_URL:jdbc:postgresql://${POSTGRES_HOST:upsdb}:${POSTGRES_PORT:5432}/${POSTGRES_DB:ups_db}}
    username: ${DATABASE_USERNAME:${POSTGRES_USER:postgres}}
    password: ${DATABASE_PASSWORD:${POSTGRES_PASSWORD:abc123}}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        dialect: ${DATABASE_DIALECT:org.hibernate.dialect.PostgreSQLDialect}
    open-in-view: false
  
  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6380}
      password: ${REDIS_PASSWORD:}
      database: 0
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 10
          max-idle: 8
          min-idle: 0
  
  rabbitmq:
    host: ${SPRING_RABBITMQ_HOST:rabbitmq}
    port: ${SPRING_RABBITMQ_PORT:5672}
    username: ${SPRING_RABBITMQ_USERNAME:guest}
    password: ${SPRING_RABBITMQ_PASSWORD:guest}
    virtual-host: /
    connection-timeout: 10000
    requested-heartbeat: 30

jwt:
  secret: ${JWT_SECRET:YourVeryLongSecretKeyThatShouldBeAtLeast256BitsLongForHS256Algorithm}
  expiration: 86400000

world:
  simulator:
    host: ${WORLD_HOST:host.docker.internal}
    port: ${WORLD_PORT:12345}
    connection-timeout: 60000  # Increased to 60 seconds to prevent timeout during idle periods
    default-sim-speed: 1000
    reconnection:
      enabled: true
      initial-delay: 2000  # Wait 2 seconds before first reconnection attempt
      max-delay: 60000    # Maximum delay between attempts
      multiplier: 1.5     # Gentler exponential backoff
      max-attempts: 5     # Fewer reconnection attempts to avoid spam

amazon:
  base-url: ${AMAZON_API_URL:http://host.docker.internal:8080}
  webhook:
    authentication:
      enabled: false  # Disable webhook authentication for development
  webhook-endpoints:
    truck-arrived: /api/webhooks/truck-arrived
    truck-dispatched: /api/webhooks/truck-dispatched
    shipment-delivered: /api/webhooks/shipment-delivered
    shipment-detail-request: /api/webhooks/shipment-detail-request

logging:
  level:
    com.miniups: INFO
    org.hibernate.SQL: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics

# Enable debug features in Docker
app:
  debug:
    world-simulator:
      enabled: true
      buffer-size: 5000
      retention-seconds: 300