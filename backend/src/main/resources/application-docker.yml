spring:
  datasource:
    url: jdbc:postgresql://${POSTGRES_HOST:upsdb}:${POSTGRES_PORT:5432}/${POSTGRES_DB:ups_db}
    username: ${POSTGRES_USER:postgres}
    password: ${POSTGRES_PASSWORD:abc123}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
  
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
    open-in-view: false
  
  redis:
    host: ${REDIS_HOST:redis}
    port: ${REDIS_PORT:6380}
    database: 0
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 10
        max-idle: 8
        min-idle: 0

jwt:
  secret: ${JWT_SECRET:YourVeryLongSecretKeyThatShouldBeAtLeast256BitsLongForHS256Algorithm}
  expiration: 86400000

world:
  simulator:
    host: ${WORLD_HOST:host.docker.internal}
    port: ${WORLD_PORT:12345}
    connection-timeout: 10000
    default-sim-speed: 1000

amazon:
  base-url: ${AMAZON_API_URL:http://host.docker.internal:8080}
  webhook-endpoints:
    truck-arrived: /api/webhooks/truck-arrived
    truck-dispatched: /api/webhooks/truck-dispatched
    shipment-delivered: /api/webhooks/shipment-delivered
    shipment-detail-request: /api/webhooks/shipment-detail-request

logging:
  level:
    com.miniups: INFO
    org.hibernate.SQL: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics