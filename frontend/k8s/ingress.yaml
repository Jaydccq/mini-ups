# =======================================
# Kubernetes Ingress Configuration
# Mini-UPS Frontend Application
# =======================================

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mini-ups-frontend-ingress
  namespace: mini-ups
  labels:
    app: mini-ups-frontend
    component: ingress
  annotations:
    # Basic ingress configuration
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    
    # SSL configuration
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header X-Download-Options "noopen" always;
      add_header X-Permitted-Cross-Domain-Policies "none" always;
      add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.googletagmanager.com https://www.google-analytics.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https: blob:; connect-src 'self' ws: wss: https: http:; frame-src 'none'; object-src 'none'; base-uri 'self';" always;
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit-rps: "10"
    nginx.ingress.kubernetes.io/rate-limit-burst: "20"
    nginx.ingress.kubernetes.io/rate-limit-connections: "5"
    
    # Compression and caching
    nginx.ingress.kubernetes.io/enable-gzip: "true"
    nginx.ingress.kubernetes.io/gzip-types: "text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/x-font-ttf font/opentype image/svg+xml image/x-icon"
    
    # Proxy configuration
    nginx.ingress.kubernetes.io/proxy-body-size: "16m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
    
    # WebSocket support
    nginx.ingress.kubernetes.io/proxy-set-headers: |
      Host $host
      X-Real-IP $remote_addr
      X-Forwarded-For $proxy_add_x_forwarded_for
      X-Forwarded-Proto $scheme
      X-Forwarded-Host $server_name
      Upgrade $http_upgrade
      Connection $connection_upgrade
    
    # Custom error pages
    nginx.ingress.kubernetes.io/custom-http-errors: "404,500,502,503,504"
    nginx.ingress.kubernetes.io/default-backend: "mini-ups-frontend-service"

spec:
  tls:
  - hosts:
    - mini-ups.com
    - www.mini-ups.com
    secretName: mini-ups-frontend-tls
  rules:
  - host: mini-ups.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mini-ups-frontend-service
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: mini-ups-backend-service
            port:
              number: 8081
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: mini-ups-backend-service
            port:
              number: 8081
  - host: www.mini-ups.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mini-ups-frontend-service
            port:
              number: 80

---
# Staging Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mini-ups-frontend-staging-ingress
  namespace: mini-ups
  labels:
    app: mini-ups-frontend
    component: ingress
    environment: staging
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Less strict rate limiting for staging
    nginx.ingress.kubernetes.io/rate-limit-rps: "50"
    nginx.ingress.kubernetes.io/rate-limit-burst: "100"
    
    # Basic auth for staging (optional)
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: staging-basic-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - Mini-UPS Staging'

spec:
  tls:
  - hosts:
    - staging.mini-ups.dev
    secretName: mini-ups-frontend-staging-tls
  rules:
  - host: staging.mini-ups.dev
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mini-ups-frontend-service
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: mini-ups-backend-service
            port:
              number: 8081

---
# Basic Auth Secret for Staging (optional)
apiVersion: v1
kind: Secret
metadata:
  name: staging-basic-auth
  namespace: mini-ups
  labels:
    app: mini-ups-frontend
    component: auth
    environment: staging
type: Opaque
data:
  # Generated with: htpasswd -c auth staging
  # Default: staging:staging123
  auth: c3RhZ2luZzokYXByMSRoRjVHSFczNCRvdVJrSW5Fb0JnSS5oQWhFd0VnQW0v