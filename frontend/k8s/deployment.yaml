# =======================================
# Kubernetes Deployment Configuration
# Mini-UPS Frontend Application
# =======================================

apiVersion: v1
kind: Namespace
metadata:
  name: mini-ups
  labels:
    name: mini-ups
    app.kubernetes.io/name: mini-ups
    app.kubernetes.io/component: namespace

---
# ConfigMap for environment variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: mini-ups
  labels:
    app: mini-ups-frontend
    component: config
data:
  VITE_API_BASE_URL: "https://api.mini-ups.com"
  VITE_WS_BASE_URL: "wss://api.mini-ups.com"
  VITE_ENABLE_ANALYTICS: "true"
  VITE_LOG_LEVEL: "error"
  NGINX_WORKER_PROCESSES: "auto"
  NGINX_WORKER_CONNECTIONS: "1024"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: frontend-secrets
  namespace: mini-ups
  labels:
    app: mini-ups-frontend
    component: secrets
type: Opaque
stringData:
  VITE_SENTRY_DSN: ""  # Set this in your CI/CD pipeline
  VITE_ANALYTICS_KEY: ""  # Set this in your CI/CD pipeline

---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mini-ups-frontend
  namespace: mini-ups
  labels:
    app: mini-ups-frontend
    version: v1
    component: frontend
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: mini-ups-frontend
  template:
    metadata:
      labels:
        app: mini-ups-frontend
        version: v1
        component: frontend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mini-ups-frontend
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: frontend
        image: ghcr.io/mini-ups/frontend:production-latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        env:
        - name: NODE_ENV
          value: "production"
        envFrom:
        - configMapRef:
            name: frontend-config
        - secretRef:
            name: frontend-secrets
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 20
          successThreshold: 1
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-cache
          mountPath: /var/cache/nginx
        - name: var-run
          mountPath: /var/run
        - name: var-log
          mountPath: /var/log/nginx
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-cache
        emptyDir: {}
      - name: var-run
        emptyDir: {}
      - name: var-log
        emptyDir: {}
      imagePullSecrets:
      - name: ghcr-secret
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - mini-ups-frontend
              topologyKey: kubernetes.io/hostname

---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mini-ups-frontend
  namespace: mini-ups
  labels:
    app: mini-ups-frontend
    component: serviceaccount
automountServiceAccountToken: false

---
# Service
apiVersion: v1
kind: Service
metadata:
  name: mini-ups-frontend-service
  namespace: mini-ups
  labels:
    app: mini-ups-frontend
    component: service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app: mini-ups-frontend

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mini-ups-frontend-hpa
  namespace: mini-ups
  labels:
    app: mini-ups-frontend
    component: hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mini-ups-frontend
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
      - type: Pods
        value: 2
        periodSeconds: 60

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mini-ups-frontend-pdb
  namespace: mini-ups
  labels:
    app: mini-ups-frontend
    component: pdb
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: mini-ups-frontend

---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: mini-ups-frontend-netpol
  namespace: mini-ups
  labels:
    app: mini-ups-frontend
    component: networkpolicy
spec:
  podSelector:
    matchLabels:
      app: mini-ups-frontend
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          name: mini-ups
      podSelector:
        matchLabels:
          app: mini-ups-backend
    ports:
    - protocol: TCP
      port: 8080
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: mini-ups
      podSelector:
        matchLabels:
          app: mini-ups-backend
    ports:
    - protocol: TCP
      port: 8081
  - to: []  # Allow all outbound for external API calls
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: UDP
      port: 53